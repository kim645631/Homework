#include <iostream>
#include <cmath>
using namespace std;

class Polynomial;

class Term {
    friend class Polynomial;
private:
    float coef;
    int exp;
};

class Polynomial {
private:
    Term* termArray;
    int capacity;
    int terms;

public:
    Polynomial() {
        capacity = 10;
        terms = 0;
        termArray = new Term[capacity];
    }

    Polynomial(const Polynomial& poly) {
        capacity = poly.capacity;
        terms = poly.terms;
        termArray = new Term[capacity];
        for (int i = 0; i < terms; i++)
            termArray[i] = poly.termArray[i];
    }

    void NewTerm(float newCoef, int newExp) {
        if (newCoef == 0) return;
        for (int i = 0; i < terms; i++) {
            if (termArray[i].exp == newExp) {
                termArray[i].coef += newCoef;
                if (termArray[i].coef == 0) {
                    for (int j = i; j < terms - 1; j++)
                        termArray[j] = termArray[j + 1];
                    terms--;
                }
                return;
            }
        }
        if (terms == capacity) {
            capacity *= 2;
            Term* temp = new Term[capacity];
            for (int i = 0; i < terms; i++)
                temp[i] = termArray[i];
            delete[] termArray;
            termArray = temp;
        }
        termArray[terms].coef = newCoef;
        termArray[terms].exp = newExp;
        terms++;

        for (int i = 0; i < terms - 1; i++) {
            for (int j = i + 1; j < terms; j++) {
                if (termArray[i].exp < termArray[j].exp)
                    swap(termArray[i], termArray[j]);
            }
        }
    }

    Polynomial Add(Polynomial poly) {
        Polynomial result;
        int a = 0, b = 0;
        while (a < terms && b < poly.terms) {
            if (termArray[a].exp == poly.termArray[b].exp) {
                float sum = termArray[a].coef + poly.termArray[b].coef;
                if (sum != 0)
                    result.NewTerm(sum, termArray[a].exp);
                a++; b++;
            }
            else if (termArray[a].exp > poly.termArray[b].exp) {
                result.NewTerm(termArray[a].coef, termArray[a].exp);
                a++;
            }
            else {
                result.NewTerm(poly.termArray[b].coef, poly.termArray[b].exp);
                b++;
            }
        }
        for (; a < terms; a++)
            result.NewTerm(termArray[a].coef, termArray[a].exp);
        for (; b < poly.terms; b++)
            result.NewTerm(poly.termArray[b].coef, poly.termArray[b].exp);
        return result;
    }

    Polynomial Mult(Polynomial poly) {
        Polynomial result;
        for (int i = 0; i < terms; i++) {
            Polynomial temp;
            for (int j = 0; j < poly.terms; j++) {
                float newCoef = termArray[i].coef * poly.termArray[j].coef;
                int newExp = termArray[i].exp + poly.termArray[j].exp;
                temp.NewTerm(newCoef, newExp);
            }
            result = result.Add(temp);
        }
        return result;
    }

    float Eval(float f) {
        float result = 0;
        for (int i = 0; i < terms; i++)
            result += termArray[i].coef * pow(f, termArray[i].exp);
        return result;
    }

    void Show() {
        if (terms == 0) {
            cout << "0" << endl;
            return;
        }
        for (int i = 0; i < terms; i++) {
            float c = termArray[i].coef;
            int e = termArray[i].exp;
            if (i > 0) {
                if (c >= 0) cout << " + ";
                else {
                    cout << " - ";
                    c = -c;
                }
            }
            else {
                if (c < 0) {
                    cout << "-";
                    c = -c;
                }
            }
            if (e == 0)
                cout << c;
            else if (e == 1)
                cout << c << "x";
            else
                cout << c << "x^" << e;
        }
        cout << endl;
    }
};

int main() {
    Polynomial A, B;
    A.NewTerm(6, 5);
    A.NewTerm(4, 3);
    A.NewTerm(3, 0);
    B.NewTerm(2, 3);
    B.NewTerm(2, 3);

    cout << "P1(x) = "; A.Show();
    cout << "P2(x) = "; B.Show();

    Polynomial sum = A.Add(B);
    cout << "Sum = "; sum.Show();

    Polynomial product = A.Mult(B);
    cout << "Product = "; product.Show();

    cout << "P1(3) = " << A.Eval(3) << endl;
    return 0;
}
